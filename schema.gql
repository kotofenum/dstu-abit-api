# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserDto {
  uid: String!
  firstName: String
  lastName: String
  patronym: String
  type: AccountType!
  birthDate: DateTime
  country: String
  locality: String
  email: String
  pwd: String
  school: String
  position: String
  child: String
  course: String
  phone: String!
  emailVerified: Boolean!
  phoneVerified: Boolean!
  isAdmin: Boolean!
  picture: String
}

enum AccountType {
  enrolee
  parent
  teacher
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type WalletDto {
  uid: String!
  balance: Float!
  owner: UserDto!
  type: WalletType!
  secure: Boolean!
}

enum WalletType {
  personal
  corporate
  challenge
  heap
  system
}

type TransactionDto {
  uid: String!
  amount: Float!
  from: WalletDto
  to: WalletDto
  purpose: String!
  status: String!
  description: String
}

type CodeDto {
  uid: String!
  code: String!
  phone: String!
  expireAt: DateTime!
  issuer: UserDto!
}

type AccessDto {
  access_token: String
}

type ExerciseOriginDto {
  uid: String!
  name: String!
  owner: UserDto!
  key: ExerciseKey!
  videoUrl: String!
}

enum ExerciseKey {
  squats
  pushUps
  plank
  jumpingJacks
}

type ChallengeDto {
  uid: String!
  title: String!
  description: String
  owner: UserDto!
  price: Float!
  config: JSON
  startsAt: DateTime!
  endsAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type ChallengeExerciseDto {
  uid: String!
  origin: ExerciseOriginDto!
  challenge: ChallengeDto!
  type: ExerciseType!
  goal: Float!
  customVideoUrl: String
}

enum ExerciseType {
  detection
  timer
}

type ChallengePassDto {
  uid: String!
  challenge: ChallengeDto!
  user: UserDto!
  cost: Float!
  obtainedAt: DateTime!
  revokedAt: DateTime
}

type ChallengeWithExercisesDto {
  uid: String!
  title: String!
  description: String
  owner: UserDto!
  price: Float!
  exercises: [ChallengeExerciseDto!]!
  config: JSON
  startsAt: DateTime!
  endsAt: DateTime!
}

type UserTrainingDto {
  uid: String!
  challenge: ChallengeDto!
  exercises: [UserExerciseDto!]!
  user: UserDto!
  startedAt: DateTime
  endedAt: DateTime
}

type UserExerciseDto {
  uid: String!
  challengeExercise: ChallengeExerciseDto!
  training: UserTrainingDto!
  score: Float!
  frames: JSON
  startedAt: DateTime
  endedAt: DateTime
}

type EventDto {
  uid: String!
  title: String!
  description: String
  type: EventType!
  module: ModuleType!
  faculty: String
  link: String
  reward: Float
  limit: Float
  placesLeft: Float
  userIsGoing: Boolean
  startsAt: DateTime!
  endsAt: DateTime!
}

enum EventType {
  presentation
  discussion
  roundTable
  webinar
  workshop
  masterClass
  lecture
  quiz
  video
  tour
  olympiad
  consultation
  meeting
  presentationQuiz
  roomToor
}

enum ModuleType {
  dstuOnline
  talents
  helloFaculty
  admissionsCampaign
  preUniversity
  sportLeisureMore
  futureTour
}

type MajorDto {
  uid: String!
  title: String!
  code: String!
  fullTimePlaces: Float
  fullTimeMeta: PlacesMeta
  mixedPlaces: Float
  mixedMeta: PlacesMeta
  extramuralPlaces: Float
  extramuralMeta: PlacesMeta
}

enum PlacesMeta {
  unobtainable
  undeveloped
  hasDegree
  secondaryMajor
  shortTerm
  unknown
}

type SpecialtyDto {
  uid: String!
  title: String!
  code: String!
  major: MajorDto!
  fullTimePlaces: Float
  fullTimeMeta: PlacesMeta
  mixedPlaces: Float
  mixedMeta: PlacesMeta
  extramuralPlaces: Float
  extramuralMeta: PlacesMeta
}

type ProgramDto {
  uid: String!
  title: String!
  score: Float
  specialty: SpecialtyDto!
  fullTimePlaces: Float
  fullTimeMeta: PlacesMeta
  mixedPlaces: Float
  mixedMeta: PlacesMeta
  extramuralPlaces: Float
  extramuralMeta: PlacesMeta
  fullTimeForm: Boolean!
  mixedForm: Boolean!
  extramuralForm: Boolean!
  degree: ProgramDegree!
  studyPeriod: String!
  languages: String!
  description: String
  advantages: String
  partners: String
  projectsAndPractices: String
  leadProfessors: String
  graduates: String
  unit: String
  supervisor: String
}

enum ProgramDegree {
  bachelor
  certified
  master
}

type SubjectDto {
  uid: String!
  title: String!
}

type ProgramSubjectDto {
  uid: String!
  program: ProgramDto!
  subject: SubjectDto!
  required: Boolean!
  score: Float!
}

type ProgramWithSubjectsDto {
  uid: String!
  title: String!
  score: Float
  specialty: SpecialtyDto!
  fullTimePlaces: Float
  fullTimeMeta: PlacesMeta
  mixedPlaces: Float
  mixedMeta: PlacesMeta
  extramuralPlaces: Float
  extramuralMeta: PlacesMeta
  fullTimeForm: Boolean!
  mixedForm: Boolean!
  extramuralForm: Boolean!
  degree: ProgramDegree!
  studyPeriod: String!
  languages: String!
  description: String
  advantages: String
  partners: String
  projectsAndPractices: String
  leadProfessors: String
  graduates: String
  unit: String
  supervisor: String
  subjects: [ProgramSubjectDto!]!
}

type UserTagDto {
  uid: String!
  relationId: String!
  relationType: TagRelationType!
  user: UserDto!
}

enum TagRelationType {
  major
  specialty
  program
}

type ConnectedUserTagsDto {
  majors: [MajorDto!]!
  specialties: [SpecialtyDto!]!
  programs: [ProgramDto!]!
}

type UserTagResultDto {
  result: String!
}

type EventTagDto {
  uid: String!
  event: EventDto!
  relationId: String!
  relationType: TagRelationType!
}

type TourDto {
  uid: String!
  title: String!
  description: String!
  videoId: String!
  type: TourType!
}

enum TourType {
  inhouse
  partner
}

type VisitDto {
  uid: String!
  user: UserDto!
  event: EventDto!
}

type UserEventDto {
  uid: String!
  user: UserDto!
  event: EventDto!
  attending: Boolean!
}

type PreuniversityRequestDto {
  uid: String!
  category: String!
  subcategory: String
  program: String!
  user: UserDto!
}

type GuidanceDto {
  uid: String!
  title: String!
  date: String!
  description: String!
  link: String
}

type CompetitionDto {
  uid: String!
  title: String!
  date: String!
  target: String!
  link: String
  group: CompetitionGroup!
}

enum CompetitionGroup {
  january
  february
  march
  april
  may
  other
}

type Query {
  users: [UserDto!]!
  user(uid: ID!): UserDto!
  me: UserDto!
  code(uid: ID!): CodeDto!
  wallets: [WalletDto!]!
  myWallets: [WalletDto!]!
  wallet(uid: ID!): WalletDto!
  transactions: [TransactionDto!]!
  transaction(uid: ID!): TransactionDto!
  exerciseOrigins: [ExerciseOriginDto!]!
  exerciseOrigin(uid: ID!): ExerciseOriginDto!
  challengeExercises: [ChallengeExerciseDto!]!
  challengeExercise(uid: ID!): ChallengeExerciseDto!
  challengePasses: [ChallengePassDto!]!
  myChallengePasses: [ChallengePassDto!]!
  challengePass(uid: ID!): ChallengePassDto!
  challenges: [ChallengeWithExercisesDto!]!
  myChallenges: [ChallengeWithExercisesDto!]!
  challenge(uid: ID!): ChallengeWithExercisesDto!
  userExercises: [UserExerciseDto!]!
  userExercise(uid: ID!): UserExerciseDto!
  userTrainings: [UserTrainingDto!]!
  myUserTrainings: [UserTrainingDto!]!
  myUserTrainingsForChallenge(uid: ID!): [UserTrainingDto!]!
  userTraining(uid: ID!): UserTrainingDto!
  events: [EventDto!]!
  eventsForModule(input: ModuleEventsInput!): [EventDto!]!
  event(uid: ID!): EventDto!
  majors: [MajorDto!]!
  major(uid: ID!): MajorDto!
  specialties: [SpecialtyDto!]!
  specialty(uid: ID!): SpecialtyDto!
  specialtiesOfMajor(input: SpecialtiesOfMajorInput!): [SpecialtyDto!]!
  programs: [ProgramDto!]!
  programsWithSubjects: [ProgramWithSubjectsDto!]!
  program(uid: ID!): ProgramDto!
  programsOfSpecialty(input: ProgramsOfSpecialtyInput!): [ProgramDto!]!
  userTags: [UserTagDto!]!
  myUserTags: ConnectedUserTagsDto!
  userTag(uid: ID!): ProgramSubjectDto!
  eventTags: [EventTagDto!]!
  eventsForUserTags: [EventDto!]!
  programSubjects: [ProgramSubjectDto!]!
  tieSubj: ProgramSubjectDto!
  subjects: [SubjectDto!]!
  subject(uid: ID!): SubjectDto!
  tours: [TourDto!]!
  tour(uid: ID!): TourDto!
  visits: [VisitDto!]!
  visit(uid: ID!): VisitDto!
  userEvents: [UserEventDto!]!
  myUserEvents: [UserEventDto!]!
  userEvent(uid: ID!): UserEventDto!
  preuniversityRequests: [PreuniversityRequestDto!]!
  preuniversityRequest(uid: ID!): PreuniversityRequestDto!
  guidances: [GuidanceDto!]!
  guidance(uid: ID!): GuidanceDto!
  competitions: [CompetitionDto!]!
  competition(uid: ID!): CompetitionDto!
}

input ModuleEventsInput {
  module: ModuleType!
}

input SpecialtiesOfMajorInput {
  majorId: String!
}

input ProgramsOfSpecialtyInput {
  specialtyId: String!
}

type Mutation {
  createUser(input: CreateUserInput!): UserDto!
  updateUser(input: UpdateUserInput!): UserDto!
  editUser(input: EditUserInput!): UserDto!
  depositFunds(input: DepositFundsInput!): TransactionDto!
  withdrawFunds(input: WithdrawFundsInput!): TransactionDto!
  sendCode(input: CodeInput!): CodeDto!
  confirmCode(input: ConfirmCodeInput!): AccessDto!
  addCode(input: CodeInput!): CodeDto!
  login(input: LoginInput!): AccessDto!
  addWallet: WalletDto!
  addExerciseOrigin(input: ExerciseOriginInput!): ExerciseOriginDto!
  addChallengeExercise(input: ChallengeExerciseInput!): ChallengeExerciseDto!
  obtainChallengePass(input: ChallengePassInput!): ChallengePassDto!
  addChallenge(input: ChallengeInput!): ChallengeDto!
  createUserExercise(input: UserExerciseInput!): UserExerciseDto!
  createUserTraining(input: UserTrainingInput!): UserTrainingDto!
  finishUserTraining(uid: ID!): UserTrainingDto!
  addEvent(input: EventInput!): EventDto!
  editEvent(input: EditEventInput!): EventDto!
  addMajor(input: MajorInput!): MajorDto!
  addSpecialty(input: SpecialtyInput!): SpecialtyDto!
  addProgram(input: ProgramInput!): ProgramDto!
  editProgram(input: EditProgramInput!): ProgramDto!
  createUserTag(input: UserTagInput!): UserTagDto!
  removeUserTag(input: UserTagInput!): UserTagResultDto!
  createEventTag(input: EventTagInput!): EventTagDto!
  addSubject(input: SubjectInput!): SubjectDto!
  addTour(input: TourInput!): TourDto!
  addVisit(input: VisitInput!): VisitDto!
  visitEvent(input: UserEventInput!): UserEventDto!
  leaveEvent(input: UserEventInput!): UserEventDto!
  addPreuniversityRequest(input: PreuniversityRequestInput!): PreuniversityRequestDto!
  addGuidance(input: GuidanceInput!): GuidanceDto!
  editGuidance(input: EditGuidanceInput!): GuidanceDto!
  populateGuidances: GuidanceDto!
  addCompetition(input: CompetitionInput!): CompetitionDto!
  editCompetition(input: EditCompetitionInput!): CompetitionDto!
  populateCompetitions: CompetitionDto!
}

input CreateUserInput {
  phone: String!
  type: AccountType!
}

input UpdateUserInput {
  firstName: String!
  lastName: String!
  patronym: String!
  birthDate: DateTime!
  country: String!
  locality: String!
  email: String!
  pwd: String!
  school: String
  position: String
  child: String
  course: String
}

input EditUserInput {
  country: String
  locality: String
  birthDate: DateTime
  school: String
  email: String
  position: String
  child: String
  course: String
}

input DepositFundsInput {
  amount: Float!
}

input WithdrawFundsInput {
  amount: Float!
}

input CodeInput {
  phone: String!
  type: AccountType!
}

input ConfirmCodeInput {
  phone: String!
  code: String!
}

input LoginInput {
  phone: String!
  password: String!
}

input ExerciseOriginInput {
  name: String!
  key: ExerciseKey!
  videoUrl: String!
}

input ChallengeExerciseInput {
  exerciseOriginId: String!
  challengeId: String!
  type: ExerciseType!
  goal: Float!
  customVideoUrl: String
}

input ChallengePassInput {
  challengeId: String!
}

input ChallengeInput {
  title: String!
  description: String
  price: Float!
  config: JSON!
  startsAt: DateTime!
  endsAt: DateTime!
}

input UserExerciseInput {
  challengeExerciseId: String!
  trainingId: String!
}

input UserTrainingInput {
  challengeId: String!
}

input EventInput {
  title: String!
  description: String
  type: EventType!
  module: ModuleType!
  faculty: String
  link: String
  reward: Float
  limit: Float
  placesLeft: Float
  startsAt: DateTime!
  endsAt: DateTime!
}

input EditEventInput {
  title: String!
  description: String
  type: EventType!
  module: ModuleType!
  faculty: String
  link: String
  reward: Float
  limit: Float
  placesLeft: Float
  startsAt: DateTime!
  endsAt: DateTime!
  eventId: String!
}

input MajorInput {
  title: String!
  code: String!
  fullTimePlaces: Float
  fullTimeMeta: PlacesMeta
  mixedPlaces: Float
  mixedMeta: PlacesMeta
  extramuralPlaces: Float
  extramuralMeta: PlacesMeta
}

input SpecialtyInput {
  title: String!
  code: String!
  majorId: String!
  fullTimePlaces: Float!
  fullTimeMeta: PlacesMeta!
  mixedPlaces: Float!
  mixedMeta: PlacesMeta!
  extramuralPlaces: Float!
  extramuralMeta: PlacesMeta!
}

input ProgramInput {
  title: String!
  score: Float
  specialtyId: String!
  fullTimePlaces: Float
  fullTimeMeta: PlacesMeta
  mixedPlaces: Float
  mixedMeta: PlacesMeta
  extramuralPlaces: Float
  extramuralMeta: PlacesMeta
  fullTimeForm: Boolean!
  mixedForm: Boolean!
  extramuralForm: Boolean!
  degree: ProgramDegree!
  studyPeriod: String!
  languages: String!
  description: String
  advantages: String
  partners: String
  projectsAndPractices: String
  leadProfessors: String
  graduates: String
  unit: String
  supervisor: String
}

input EditProgramInput {
  title: String!
  score: Float
  specialtyId: String!
  fullTimePlaces: Float
  fullTimeMeta: PlacesMeta
  mixedPlaces: Float
  mixedMeta: PlacesMeta
  extramuralPlaces: Float
  extramuralMeta: PlacesMeta
  fullTimeForm: Boolean!
  mixedForm: Boolean!
  extramuralForm: Boolean!
  degree: ProgramDegree!
  studyPeriod: String!
  languages: String!
  description: String
  advantages: String
  partners: String
  projectsAndPractices: String
  leadProfessors: String
  graduates: String
  unit: String
  supervisor: String
  uid: String!
}

input UserTagInput {
  relationId: String!
  relationType: TagRelationType!
}

input EventTagInput {
  eventId: String!
  relationId: String!
  relationType: TagRelationType!
}

input SubjectInput {
  title: String!
}

input TourInput {
  title: String!
  description: String!
  videoId: String!
  type: TourType!
}

input VisitInput {
  eventId: String!
}

input UserEventInput {
  eventId: String!
}

input PreuniversityRequestInput {
  category: String!
  subcategory: String
  program: String!
}

input GuidanceInput {
  title: String!
  date: String!
  description: String!
  link: String
}

input EditGuidanceInput {
  uid: String!
  title: String!
  date: String!
  description: String!
  link: String
}

input CompetitionInput {
  title: String!
  date: String!
  target: String!
  link: String
  group: CompetitionGroup!
}

input EditCompetitionInput {
  uid: String!
  title: String!
  date: String!
  target: String!
  link: String
  group: CompetitionGroup!
}

type Subscription {
  balanceUpdated: WalletDto!
}
